name: CD - Create a Release

push:
  # Sequence of patterns matched against refs/tags
  tags:
    - 'v*.*.*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  PROJECT_NAME: {{PROJECT_NAME}}
  REGISTRY: eu.gcr.io

jobs:
  check-application:
    name: Check application
    runs-on: 'ubuntu-latest'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: '{{PYTHON_VERSION}}'

      - name: Check typing, linting, formatting and run unit-tests
        env:
          ENV:
        run: make checks

      - name: SonarQube Scan
        uses: kitabisa/sonarqube-action@v1.2.0
        with:
          host: ${{ secrets.SONARQUBE_HOST }}
          login: ${{ secrets.SONARQUBE_TOKEN }}
          projectBaseDir: "."
          projectKey: $PROJECT_NAME

  build-test-push-deploy-container:
      name: Build, test, push and deploy
      runs-on: 'ubuntu-latest'
      needs: check-application
      strategy:
        matrix:
          ENV: [ dev, prod ]
      steps:
      - name: Check Production tag
        id: check-tag
        run: |
          if [[ ${{ matrix.ENV }} != 'prod' ]] || [[ ${{ github.event.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo ::set-output name=prod::true
          fi
      - name: Add PROJECT_ID and GCLOUD_SERVICE_KEY to environment vars
        if: steps.check-tag.outputs.prod == 'true'
        run: |
          if [[ ${{matrix.ENV}} == 'dev' ]]; then 
            echo "GCLOUD_SERVICE_KEY=${{ secrets.GCLOUD_SERVICE_KEY_DEV }}" >> $GITHUB_ENV
            echo "PROJECT_ID={{PROJECT_ID_DEV}}" >> $GITHUB_ENV
          elif [[ ${{matrix.ENV}} == 'prod' ]]; then
            echo "GCLOUD_SERVICE_KEY=${{ secrets.GCLOUD_SERVICE_KEY_PROD }}" >> $GITHUB_ENV
            echo "PROJECT_ID={{PROJECT_ID_PROD}}" >> $GITHUB_ENV
          fi

      - name: Authenticate to Google Cloud
        if: steps.check-tag.outputs.prod == 'true'
        uses: google-github-actions/auth@v0
        with:
          credentials_json: $GCLOUD_SERVICE_KEY

      - name: Setup Google Cloud SDK
        if: steps.check-tag.outputs.prod == 'true'
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key:
          project_id: $PROJECT_ID
          export_default_credentials: true

      - name: Configure docker to use the gcloud command-line tool as a credential helper
        if: steps.check-tag.outputs.prod == 'true'
        run: gcloud auth configure-docker -q

      - name: Set up Docker Buildx
        if: steps.check-tag.outputs.prod == 'true'
        uses: docker/setup-buildx-action@v2

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            $REGISTRY/$PROJECT_ID/$PROJECT_NAME
          flavor: |
            latest=auto
          # generate Docker tags based on the following events/attributes
          tags: |
            type=sha
            type=semver,pattern={{version}}

      - name: Build image
        if: steps.check-tag.outputs.prod == 'true'
        uses: docker/build-push-action@v3
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        context: .
        load: true
        build-args: |
          ENV=$ENV

      - name: Run Trivy vulnerability scanner
        if: steps.check-tag.outputs.prod == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: $REGISTRY/$PROJECT_ID/$PROJECT_NAME:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          hide-progress: true
          security-checks: vuln,config,secret
          severity: CRITICAL,HIGH

      - name: Push image
        if: steps.check-tag.outputs.prod == 'true'
        uses: docker/build-push-action@v3
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        context: .
        build-args: |
          ENV=$ENV

      - name: Deploy on Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: $PROJECT_NAME
          image: $REGISTRY/$PROJECT_ID/$PROJECT_NAME:${{ github.sha }}